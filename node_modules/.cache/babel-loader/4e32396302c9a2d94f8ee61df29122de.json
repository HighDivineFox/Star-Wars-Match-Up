{"ast":null,"code":"var _jsxFileName = \"D:\\\\apache\\\\htdocs\\\\React\\\\FreeCodeCampTuts\\\\API\\\\api-prac\\\\src\\\\Components\\\\Background.js\";\nimport React from 'react';\nimport \"../App.css\";\n\nclass Canvas extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      stars: []\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      id: \"canvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }));\n  }\n\n  componentDidMount() {\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  updateDimensions() {\n    console.log(\"updating\");\n    const canvas = this.refs.canvas;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    this.updateCanvas();\n  }\n\n  updateCanvas() {\n    const ctx = this.refs.canvas.getContext(\"2d\");\n    ctx.fillStyle = \"#000\";\n    ctx.fillRect(0, 0, window.innerWidth, window.innerHeight);\n    this.setState({\n      stars: this.getStarArray()\n    });\n    ctx.fillStyle = \"#FFF\";\n\n    for (var i = 0; i < this.state.stars.length; i++) {\n      ctx.beginPath();\n      ctx.arc(this.state.stars[i].x, this.state.stars[i].y, Math.floor(Math.random() * 3), 0, Math.PI * 2, false);\n      ctx.fill();\n    }\n  }\n\n  getStarArray() {\n    var arr = [];\n\n    for (var i = 0; i < 1000; i++) {\n      arr.push({\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight\n      });\n    }\n\n    return arr;\n  }\n\n}\n\nexport default Canvas;","map":{"version":3,"sources":["D:\\apache\\htdocs\\React\\FreeCodeCampTuts\\API\\api-prac\\src\\Components\\Background.js"],"names":["React","Canvas","Component","constructor","state","stars","render","componentDidMount","updateDimensions","window","addEventListener","bind","console","log","canvas","refs","width","innerWidth","height","innerHeight","updateCanvas","ctx","getContext","fillStyle","fillRect","setState","getStarArray","i","length","beginPath","arc","x","y","Math","floor","random","PI","fill","arr","push"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;;AAEA,MAAMC,MAAN,SAAqBD,KAAK,CAACE,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE;AADE,KAAb;AAGH;;AAEDC,EAAAA,MAAM,GAAE;AACJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,GAAG,EAAC,QAAZ;AAAqB,MAAA,EAAE,EAAC,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH;;AAEDC,EAAAA,iBAAiB,GAAE;AACf,SAAKC,gBAAL;AAEAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKF,gBAAL,CAAsBG,IAAtB,CAA2B,IAA3B,CAAlC;AACH;;AAEDH,EAAAA,gBAAgB,GAAE;AACdI,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,UAAMC,MAAM,GAAG,KAAKC,IAAL,CAAUD,MAAzB;AAEAA,IAAAA,MAAM,CAACE,KAAP,GAAeP,MAAM,CAACQ,UAAtB;AACAH,IAAAA,MAAM,CAACI,MAAP,GAAgBT,MAAM,CAACU,WAAvB;AAEA,SAAKC,YAAL;AACH;;AAEDA,EAAAA,YAAY,GAAE;AACV,UAAMC,GAAG,GAAG,KAAKN,IAAL,CAAUD,MAAV,CAAiBQ,UAAjB,CAA4B,IAA5B,CAAZ;AAEAD,IAAAA,GAAG,CAACE,SAAJ,GAAgB,MAAhB;AACAF,IAAAA,GAAG,CAACG,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBf,MAAM,CAACQ,UAA1B,EAAsCR,MAAM,CAACU,WAA7C;AAEA,SAAKM,QAAL,CAAc;AACVpB,MAAAA,KAAK,EAAE,KAAKqB,YAAL;AADG,KAAd;AAIAL,IAAAA,GAAG,CAACE,SAAJ,GAAgB,MAAhB;;AACA,SAAI,IAAII,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKvB,KAAL,CAAWC,KAAX,CAAiBuB,MAApC,EAA4CD,CAAC,EAA7C,EAAgD;AAC5CN,MAAAA,GAAG,CAACQ,SAAJ;AACAR,MAAAA,GAAG,CAACS,GAAJ,CAAQ,KAAK1B,KAAL,CAAWC,KAAX,CAAiBsB,CAAjB,EAAoBI,CAA5B,EAA+B,KAAK3B,KAAL,CAAWC,KAAX,CAAiBsB,CAAjB,EAAoBK,CAAnD,EAAsDC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAtD,EAAqF,CAArF,EAAwFF,IAAI,CAACG,EAAL,GAAU,CAAlG,EAAqG,KAArG;AACAf,MAAAA,GAAG,CAACgB,IAAJ;AACH;AACJ;;AAEDX,EAAAA,YAAY,GAAE;AACV,QAAIY,GAAG,GAAG,EAAV;;AAEA,SAAI,IAAIX,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,IAAnB,EAAyBA,CAAC,EAA1B,EAA6B;AACzBW,MAAAA,GAAG,CAACC,IAAJ,CAAS;AACLR,QAAAA,CAAC,EAAEE,IAAI,CAACE,MAAL,KAAgB1B,MAAM,CAACQ,UADrB;AAELe,QAAAA,CAAC,EAAEC,IAAI,CAACE,MAAL,KAAgB1B,MAAM,CAACU;AAFrB,OAAT;AAIH;;AAED,WAAOmB,GAAP;AACH;;AA7DgC;;AAgErC,eAAerC,MAAf","sourcesContent":["import React from 'react'\r\nimport \"../App.css\"\r\n\r\nclass Canvas extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            stars: []\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <canvas ref=\"canvas\" id=\"canvas\"></canvas>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.updateDimensions()\r\n\r\n        window.addEventListener(\"resize\", this.updateDimensions.bind(this))\r\n    }\r\n\r\n    updateDimensions(){\r\n        console.log(\"updating\")\r\n        const canvas = this.refs.canvas\r\n\r\n        canvas.width = window.innerWidth\r\n        canvas.height = window.innerHeight\r\n\r\n        this.updateCanvas()\r\n    }\r\n\r\n    updateCanvas(){\r\n        const ctx = this.refs.canvas.getContext(\"2d\")\r\n    \r\n        ctx.fillStyle = \"#000\"\r\n        ctx.fillRect(0, 0, window.innerWidth, window.innerHeight)\r\n\r\n        this.setState({\r\n            stars: this.getStarArray()\r\n        })\r\n\r\n        ctx.fillStyle = \"#FFF\"\r\n        for(var i = 0; i < this.state.stars.length; i++){\r\n            ctx.beginPath()\r\n            ctx.arc(this.state.stars[i].x, this.state.stars[i].y, Math.floor(Math.random() * 3), 0, Math.PI * 2, false)\r\n            ctx.fill()\r\n        }\r\n    }\r\n\r\n    getStarArray(){\r\n        var arr = []\r\n\r\n        for(var i = 0; i < 1000; i++){\r\n            arr.push({\r\n                x: Math.random() * window.innerWidth,\r\n                y: Math.random() * window.innerHeight\r\n            })\r\n        }\r\n\r\n        return arr\r\n    }\r\n}\r\n\r\nexport default Canvas"]},"metadata":{},"sourceType":"module"}