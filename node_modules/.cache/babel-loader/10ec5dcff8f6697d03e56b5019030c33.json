{"ast":null,"code":"var _jsxFileName = \"D:\\\\apache\\\\htdocs\\\\React\\\\FreeCodeCampTuts\\\\API\\\\api-prac\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport Content from './Components/Content';\nimport Character from './Components/Character';\nimport CharacterChoice from './Components/CharacterChoice';\nimport Canvas from './Components/Background';\nimport jsonScenarios from \"./scenarios.js\";\nimport numberOfCharacters from \"./GlobalSettings\";\n/*\n  App feature.\n    Ability to seelct which character wins in a certain scenario.\n*/\n// TODO: Keep track of selected Id's so we don't reroll them.\n//        Reroll scenario\n//        See stats for all scenarios\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    var arr = [];\n\n    for (var i = 1; i <= numberOfCharacters; i++) {\n      if (i === 17) continue;\n      arr.push(i);\n    }\n\n    this.state = {\n      scenario: \"\",\n      leftChar: null,\n      rightChar: null,\n      availableIndexes: arr,\n      winner: null //-- FUNCTIONS BOUND TO THIS COMPONENT\n\n    };\n    this.newLeftChar = this.newLeftChar.bind(this);\n    this.newRightChar = this.newRightChar.bind(this);\n    this.getScenario = this.getScenario.bind(this);\n  }\n\n  render() {\n    if (this.state.winner !== null) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Canvas, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"Container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"Header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Winner!\"), React.createElement(Character, {\n        character: this.state.winner,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      })));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Canvas, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(Header, {\n        scenario: this.state.scenario,\n        refresh: this.getScenario,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(Content, {\n        leftChar: this.state.leftChar,\n        rightChar: this.state.rightChar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(CharacterChoice, {\n        onClickLeft: this.newLeftChar,\n        onClickRight: this.newRightChar,\n        charsLeft: this.state.availableIndexes.length,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }));\n    }\n  }\n\n  componentDidMount() {\n    this.resetIndexesandScenario();\n    this.newLeftChar();\n    this.newRightChar();\n  }\n\n  validationFailed(index) {\n    if (index === 17) {\n      console.log(\"17 selected. Invalid choice. Picking again.\");\n      return true;\n    }\n\n    if (this.state.availableIndexes.indexOf(index) === -1) {\n      console.log(\"Index already picked\");\n      return true;\n    }\n\n    if (this.state.leftChar === null || this.state.rightChar === null) {\n      console.log(\"A character is null\");\n      return false;\n    } else if (index === this.state.leftChar.index || index === this.state.rightChar.index) {\n      console.log(\"Same characters selected\");\n      return true;\n    }\n\n    return false;\n  }\n\n  resetIndexesandScenario() {\n    var arr = [];\n\n    for (var i = 1; i <= numberOfCharacters; i++) {\n      if (i === 17) continue;\n      arr.push(i);\n    }\n\n    this.setState({\n      scenario: this.getScenario(),\n      availableIndexes: arr\n    });\n  }\n\n  getScenario() {\n    return jsonScenarios.scenarios[Math.floor(Math.random() * jsonScenarios.scenarios.length)];\n  }\n\n  newChar(direction) {\n    if (this.state.leftChar !== null && direction.toLowerCase() === \"left\") {\n      this.setState({\n        leftChar: null\n      });\n    }\n\n    if (this.state.leftChar !== null && direction.toLowerCase() === \"right\") {\n      this.setState({\n        rightChar: null\n      });\n    }\n\n    var charIndex1 = this.state.availableIndexes[this.getNewCharacterIndex()];\n    var count = 0;\n\n    while (this.validationFailed(charIndex1)) {\n      charIndex1 = this.state.availableIndexes[this.getNewCharacterIndex()];\n      count++;\n\n      if (count >= 150) {\n        console.log(\"Too many attempts to get a new character\");\n        return;\n      }\n    }\n\n    var indexToRemove = this.state.availableIndexes.indexOf(charIndex1);\n    var arr = this.state.availableIndexes;\n    arr.splice(indexToRemove, 1);\n    var charURL1 = \"https://swapi.co/api/people/\" + charIndex1;\n    var char = null;\n    fetch(charURL1).then(function (response) {\n      if (response.ok) {\n        console.log(\"Successful API call\");\n        return response;\n      } else {\n        console.log(\"Unsuccessful APIcall\");\n      }\n    }).then(response => response.json()).then(character => {\n      if (character.species.length === 0) {\n        // Don't try to fetch species if there is no species\n        char = this.getCharacterObject(character, {\n          name: \"Unknown\"\n        }, charIndex1);\n\n        if (direction.toLowerCase() === \"left\") {\n          this.setState({\n            leftChar: char,\n            availableIndexes: arr\n          });\n        } else if (direction.toLowerCase() === \"right\") {\n          this.setState({\n            rightChar: char,\n            availableIndexes: arr\n          });\n        }\n      } else {\n        fetch(character.species).then(response => response.json()).then(species => {\n          char = this.getCharacterObject(character, species, charIndex1);\n        }).then(data => {\n          if (direction.toLowerCase() === \"left\") {\n            this.setState({\n              leftChar: char,\n              availableIndexes: arr\n            });\n          } else if (direction.toLowerCase() === \"right\") {\n            this.setState({\n              rightChar: char,\n              availableIndexes: arr\n            });\n          }\n        });\n      }\n    });\n  }\n\n  newLeftChar() {\n    if (this.state.availableIndexes.length > 0) {\n      this.newChar(\"left\");\n    } else {\n      this.setState(prevState => {\n        return {\n          winner: prevState.rightChar\n        };\n      });\n    }\n  }\n\n  newRightChar() {\n    if (this.state.availableIndexes.length > 0) {\n      this.newChar(\"right\");\n    } else {\n      this.setState(prevState => {\n        return {\n          winner: prevState.leftChar\n        };\n      });\n    }\n  }\n\n  getCharacterObject(character, species, index) {\n    return {\n      index: index,\n      name: character.name,\n      species: species.name,\n      gender: character.gender,\n      birth_year: character.birth_year,\n      hair_color: character.hair_color,\n      mass: character.mass\n    };\n  }\n\n  getNewCharacterIndex() {\n    var rand = Math.floor(Math.random() * this.state.availableIndexes.length);\n    console.log(\"index: \" + rand);\n    return rand;\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:\\apache\\htdocs\\React\\FreeCodeCampTuts\\API\\api-prac\\src\\App.js"],"names":["React","Header","Content","Character","CharacterChoice","Canvas","jsonScenarios","numberOfCharacters","App","Component","constructor","arr","i","push","state","scenario","leftChar","rightChar","availableIndexes","winner","newLeftChar","bind","newRightChar","getScenario","render","length","componentDidMount","resetIndexesandScenario","validationFailed","index","console","log","indexOf","setState","scenarios","Math","floor","random","newChar","direction","toLowerCase","charIndex1","getNewCharacterIndex","count","indexToRemove","splice","charURL1","char","fetch","then","response","ok","json","character","species","getCharacterObject","name","data","prevState","gender","birth_year","hair_color","mass","rand"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport Content from './Components/Content';\nimport Character from './Components/Character';\nimport CharacterChoice from './Components/CharacterChoice';\nimport Canvas from './Components/Background';\nimport jsonScenarios from \"./scenarios.js\";\nimport numberOfCharacters from \"./GlobalSettings\";\n\n/*\n  App feature.\n    Ability to seelct which character wins in a certain scenario.\n*/\n\n// TODO: Keep track of selected Id's so we don't reroll them.\n//        Reroll scenario\n//        See stats for all scenarios\n\nclass App extends React.Component {\n  constructor(){\n    super()\n\n    var arr = []\n\n    for(var i = 1; i <= numberOfCharacters; i++){\n      if(i === 17) continue\n      arr.push(i)\n    }\n\n    this.state = {\n      scenario: \"\",\n      leftChar: null,\n      rightChar: null,\n      availableIndexes: arr,\n      winner: null\n    }\n\n    //-- FUNCTIONS BOUND TO THIS COMPONENT\n    this.newLeftChar = this.newLeftChar.bind(this)\n    this.newRightChar = this.newRightChar.bind(this)\n    this.getScenario = this.getScenario.bind(this)\n  }\n\n  render() {\n\n    if(this.state.winner !== null){\n      return (\n        <div>\n          <Canvas />\n          <div id=\"Container\">\n            <h1 className=\"Header\">Winner!</h1>\n            <Character character={this.state.winner} />\n          </div>\n        </div>\n      )\n    }else{\n      return (\n        <div>\n          <Canvas />\n          <Header scenario={this.state.scenario} refresh={this.getScenario}/>\n          <Content leftChar={this.state.leftChar} rightChar = {this.state.rightChar}/>\n          <CharacterChoice onClickLeft={this.newLeftChar} onClickRight={this.newRightChar} charsLeft={this.state.availableIndexes.length}/>\n        </div>\n      )\n    }\n  }\n\n  componentDidMount(){\n    this.resetIndexesandScenario()\n    this.newLeftChar()\n    this.newRightChar()\n  }\n\n  validationFailed(index){\n      if(index === 17){\n        console.log(\"17 selected. Invalid choice. Picking again.\")\n        return true;\n      }\n\n      if(this.state.availableIndexes.indexOf(index) === -1){\n        console.log(\"Index already picked\")\n        return true\n      }\n\n      if(this.state.leftChar === null || this.state.rightChar === null){\n        console.log(\"A character is null\")\n        return false\n      }else if(index === this.state.leftChar.index || index === this.state.rightChar.index){\n        console.log(\"Same characters selected\")\n        return true;\n      }     \n\n    return false\n  }\n\n  resetIndexesandScenario(){\n    var arr = []\n\n    for(var i = 1; i <= numberOfCharacters; i++){\n      if(i === 17) continue\n      arr.push(i)\n    }\n\n    this.setState({\n      scenario: this.getScenario(),\n      availableIndexes: arr\n    })\n  }\n\n  getScenario(){\n    return jsonScenarios.scenarios[Math.floor(Math.random() * jsonScenarios.scenarios.length)]\n  }\n\n  newChar(direction){\n    if(this.state.leftChar !== null && direction.toLowerCase() === \"left\"){\n      this.setState({\n        leftChar: null\n      })\n    }\n\n    if(this.state.leftChar !== null && direction.toLowerCase() === \"right\"){\n      this.setState({\n        rightChar: null\n      })\n    }\n\n    var charIndex1 = this.state.availableIndexes[this.getNewCharacterIndex()]\n\n    var count = 0\n\n    while (this.validationFailed(charIndex1)){\n      charIndex1 = this.state.availableIndexes[this.getNewCharacterIndex()]\n      count++;\n\n      if(count >= 150){\n        console.log(\"Too many attempts to get a new character\")\n        return\n      }\n    }\n\n    var indexToRemove = this.state.availableIndexes.indexOf(charIndex1)\n\n    var arr = this.state.availableIndexes\n    arr.splice(indexToRemove, 1)\n\n    var charURL1 = \"https://swapi.co/api/people/\" + charIndex1\n    var char = null;\n\n    fetch(charURL1)\n      .then(function(response) {\n        if(response.ok){\n          console.log(\"Successful API call\")\n          return response\n        }else{\n          console.log(\"Unsuccessful APIcall\")\n        }\n      })\n      .then(response => response.json())\n\n      .then(character => {\n        if(character.species.length === 0){\n          // Don't try to fetch species if there is no species\n          char = this.getCharacterObject(character, {name: \"Unknown\"}, charIndex1)\n\n\n          if(direction.toLowerCase() === \"left\"){\n            this.setState({\n              leftChar: char,\n              availableIndexes: arr\n            })\n          }else if(direction.toLowerCase() === \"right\"){\n            this.setState({\n              rightChar: char,\n              availableIndexes: arr\n            })\n          }\n          \n        }else{\n          fetch(character.species)\n            .then(response => response.json())\n\n            .then(species => {\n              char = this.getCharacterObject(character, species, charIndex1)\n            })\n\n            .then(data => {\n              if(direction.toLowerCase() === \"left\"){\n                this.setState({\n                  leftChar: char,\n                  availableIndexes: arr\n                })\n              }else if(direction.toLowerCase() === \"right\"){\n                this.setState({\n                  rightChar: char,\n                  availableIndexes: arr\n                })\n              }\n            })\n        }\n      })\n  }\n\n  newLeftChar(){\n    if(this.state.availableIndexes.length > 0){\n      this.newChar(\"left\")\n    }else{\n      this.setState(prevState => {\n        return{\n          winner: prevState.rightChar\n        }\n      })\n    }\n  }\n\n  newRightChar(){\n    if(this.state.availableIndexes.length > 0){\n      this.newChar(\"right\")\n    }else{\n      this.setState(prevState => {\n        return{\n          winner: prevState.leftChar\n        }\n      })\n    }\n  }\n\n  getCharacterObject(character, species, index){\n    return {\n        index: index,\n        name: character.name,\n        species: species.name,\n        gender: character.gender,\n        birth_year: character.birth_year,\n        hair_color: character.hair_color,\n        mass: character.mass\n    }\n  }\n\n  getNewCharacterIndex(){\n    var rand = Math.floor(Math.random() * this.state.availableIndexes.length)    \n    console.log(\"index: \" + rand)\n\n    return rand\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}